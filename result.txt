# Wireshark Packet Capture Analysis

## Overview

This project involves analyzing network traffic using Wireshark. The steps followed include:

1. Installing Wireshark.
2. Capturing live traffic on the active network interface.
3. Generating traffic by browsing websites and pinging servers.
4. Applying protocol filters (TLS, DNS, HTTP) to identify different traffic types.
5. Exporting the capture as a `.pcapng` file.
6. Summarizing the findings.

## File

- `main.pcapng` â€“ Packet capture file containing the network traffic used for analysis.

## Protocols Identified

The captured network traffic includes at least **three different protocols**:

1. **TLS (Transport Layer Security)**
   - **Port**: 443
   - **Details**: 
     - Version: TLSv1.2 and TLSv1.3 observed
     - Handshake steps including `Client Hello`, `Server Hello`, `Key Exchange`, and encrypted `Application Data`.
     - Example:
       - Source: `34.160.144.191`
       - Destination: `10.0.2.15`
       - Packet: `New Session Ticket`, `Change Cipher Spec`, `Application Data`

2. **DNS (Domain Name System)**
   - **Port**: 53
   - **Details**:
     - Query and response traffic
     - Hostnames like `example.org`, `pki.goog`, `detectportal.firefox.com`
     - AAAA and A queries observed

3. **HTTP (Hypertext Transfer Protocol)**
   - **Port**: 80
   - **Details**:
     - GET requests to URLs like `/success.txt?ipv4 HTTP/1.1`
     - HTTP 200 OK responses with plain text content

## Screenshots

Screenshots are included to show filtering for:
- TLS traffic
- DNS queries
- HTTP requests/responses

## Summary

- **TLS** was the dominant protocol, securing web communications.
- **DNS** resolved domain names to IP addresses.
- **HTTP** showed clear-text GET requests/responses.
- The `.pcapng` file contains a comprehensive trace of a browsing session, showing the layered protocol communication from name resolution to secure content transfer.

---

Generated by analyzing captured data using Wireshark.
